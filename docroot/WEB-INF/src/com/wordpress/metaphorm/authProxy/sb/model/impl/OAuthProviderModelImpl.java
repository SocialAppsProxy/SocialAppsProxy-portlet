/**
 * Copyright (c) 2000-2012 Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.wordpress.metaphorm.authProxy.sb.model.impl;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;
import com.liferay.portal.util.PortalUtil;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import com.wordpress.metaphorm.authProxy.sb.model.OAuthProvider;
import com.wordpress.metaphorm.authProxy.sb.model.OAuthProviderModel;

import java.io.Serializable;

import java.sql.Types;

import java.util.Date;
import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the OAuthProvider service. Represents a row in the &quot;OAuthProxy_OAuthProvider&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.wordpress.metaphorm.authProxy.sb.model.OAuthProviderModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link OAuthProviderImpl}.
 * </p>
 *
 * @author stiansigvartsen
 * @see OAuthProviderImpl
 * @see com.wordpress.metaphorm.authProxy.sb.model.OAuthProvider
 * @see com.wordpress.metaphorm.authProxy.sb.model.OAuthProviderModel
 * @generated
 */
public class OAuthProviderModelImpl extends BaseModelImpl<OAuthProvider>
	implements OAuthProviderModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a o auth provider model instance should use the {@link com.wordpress.metaphorm.authProxy.sb.model.OAuthProvider} interface instead.
	 */
	public static final String TABLE_NAME = "OAuthProxy_OAuthProvider";
	public static final Object[][] TABLE_COLUMNS = {
			{ "providerId", Types.BIGINT },
			{ "userId", Types.BIGINT },
			{ "userName", Types.VARCHAR },
			{ "createDate", Types.TIMESTAMP },
			{ "modifiedDate", Types.TIMESTAMP },
			{ "consumerKey", Types.VARCHAR },
			{ "consumerSecret", Types.VARCHAR },
			{ "realm", Types.VARCHAR },
			{ "requestTokenURL", Types.VARCHAR },
			{ "authoriseURL", Types.VARCHAR },
			{ "accessTokenURL", Types.VARCHAR },
			{ "protocolVersion", Types.VARCHAR },
			{ "preemptiveAuthURLPattern", Types.VARCHAR },
			{ "useHTTPS", Types.BOOLEAN }
		};
	public static final String TABLE_SQL_CREATE = "create table OAuthProxy_OAuthProvider (providerId LONG not null primary key,userId LONG,userName VARCHAR(75) null,createDate DATE null,modifiedDate DATE null,consumerKey VARCHAR(75) null,consumerSecret VARCHAR(75) null,realm VARCHAR(75) null,requestTokenURL VARCHAR(75) null,authoriseURL VARCHAR(75) null,accessTokenURL VARCHAR(75) null,protocolVersion VARCHAR(75) null,preemptiveAuthURLPattern VARCHAR(75) null,useHTTPS BOOLEAN)";
	public static final String TABLE_SQL_DROP = "drop table OAuthProxy_OAuthProvider";
	public static final String ORDER_BY_JPQL = " ORDER BY oAuthProvider.realm ASC";
	public static final String ORDER_BY_SQL = " ORDER BY OAuthProxy_OAuthProvider.realm ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.com.wordpress.metaphorm.authProxy.sb.model.OAuthProvider"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.com.wordpress.metaphorm.authProxy.sb.model.OAuthProvider"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.column.bitmask.enabled.com.wordpress.metaphorm.authProxy.sb.model.OAuthProvider"),
			true);
	public static long REALM_COLUMN_BITMASK = 1L;
	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.com.wordpress.metaphorm.authProxy.sb.model.OAuthProvider"));

	public OAuthProviderModelImpl() {
	}

	public long getPrimaryKey() {
		return _providerId;
	}

	public void setPrimaryKey(long primaryKey) {
		setProviderId(primaryKey);
	}

	public Serializable getPrimaryKeyObj() {
		return new Long(_providerId);
	}

	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	public Class<?> getModelClass() {
		return OAuthProvider.class;
	}

	public String getModelClassName() {
		return OAuthProvider.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("providerId", getProviderId());
		attributes.put("userId", getUserId());
		attributes.put("userName", getUserName());
		attributes.put("createDate", getCreateDate());
		attributes.put("modifiedDate", getModifiedDate());
		attributes.put("consumerKey", getConsumerKey());
		attributes.put("consumerSecret", getConsumerSecret());
		attributes.put("realm", getRealm());
		attributes.put("requestTokenURL", getRequestTokenURL());
		attributes.put("authoriseURL", getAuthoriseURL());
		attributes.put("accessTokenURL", getAccessTokenURL());
		attributes.put("protocolVersion", getProtocolVersion());
		attributes.put("preemptiveAuthURLPattern", getPreemptiveAuthURLPattern());
		attributes.put("useHTTPS", getUseHTTPS());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long providerId = (Long)attributes.get("providerId");

		if (providerId != null) {
			setProviderId(providerId);
		}

		Long userId = (Long)attributes.get("userId");

		if (userId != null) {
			setUserId(userId);
		}

		String userName = (String)attributes.get("userName");

		if (userName != null) {
			setUserName(userName);
		}

		Date createDate = (Date)attributes.get("createDate");

		if (createDate != null) {
			setCreateDate(createDate);
		}

		Date modifiedDate = (Date)attributes.get("modifiedDate");

		if (modifiedDate != null) {
			setModifiedDate(modifiedDate);
		}

		String consumerKey = (String)attributes.get("consumerKey");

		if (consumerKey != null) {
			setConsumerKey(consumerKey);
		}

		String consumerSecret = (String)attributes.get("consumerSecret");

		if (consumerSecret != null) {
			setConsumerSecret(consumerSecret);
		}

		String realm = (String)attributes.get("realm");

		if (realm != null) {
			setRealm(realm);
		}

		String requestTokenURL = (String)attributes.get("requestTokenURL");

		if (requestTokenURL != null) {
			setRequestTokenURL(requestTokenURL);
		}

		String authoriseURL = (String)attributes.get("authoriseURL");

		if (authoriseURL != null) {
			setAuthoriseURL(authoriseURL);
		}

		String accessTokenURL = (String)attributes.get("accessTokenURL");

		if (accessTokenURL != null) {
			setAccessTokenURL(accessTokenURL);
		}

		String protocolVersion = (String)attributes.get("protocolVersion");

		if (protocolVersion != null) {
			setProtocolVersion(protocolVersion);
		}

		String preemptiveAuthURLPattern = (String)attributes.get(
				"preemptiveAuthURLPattern");

		if (preemptiveAuthURLPattern != null) {
			setPreemptiveAuthURLPattern(preemptiveAuthURLPattern);
		}

		Boolean useHTTPS = (Boolean)attributes.get("useHTTPS");

		if (useHTTPS != null) {
			setUseHTTPS(useHTTPS);
		}
	}

	public long getProviderId() {
		return _providerId;
	}

	public void setProviderId(long providerId) {
		_providerId = providerId;
	}

	public long getUserId() {
		return _userId;
	}

	public void setUserId(long userId) {
		_userId = userId;
	}

	public String getUserUuid() throws SystemException {
		return PortalUtil.getUserValue(getUserId(), "uuid", _userUuid);
	}

	public void setUserUuid(String userUuid) {
		_userUuid = userUuid;
	}

	public String getUserName() {
		if (_userName == null) {
			return StringPool.BLANK;
		}
		else {
			return _userName;
		}
	}

	public void setUserName(String userName) {
		_userName = userName;
	}

	public Date getCreateDate() {
		return _createDate;
	}

	public void setCreateDate(Date createDate) {
		_createDate = createDate;
	}

	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public void setModifiedDate(Date modifiedDate) {
		_modifiedDate = modifiedDate;
	}

	public String getConsumerKey() {
		if (_consumerKey == null) {
			return StringPool.BLANK;
		}
		else {
			return _consumerKey;
		}
	}

	public void setConsumerKey(String consumerKey) {
		_consumerKey = consumerKey;
	}

	public String getConsumerSecret() {
		if (_consumerSecret == null) {
			return StringPool.BLANK;
		}
		else {
			return _consumerSecret;
		}
	}

	public void setConsumerSecret(String consumerSecret) {
		_consumerSecret = consumerSecret;
	}

	public String getRealm() {
		if (_realm == null) {
			return StringPool.BLANK;
		}
		else {
			return _realm;
		}
	}

	public void setRealm(String realm) {
		_columnBitmask = -1L;

		if (_originalRealm == null) {
			_originalRealm = _realm;
		}

		_realm = realm;
	}

	public String getOriginalRealm() {
		return GetterUtil.getString(_originalRealm);
	}

	public String getRequestTokenURL() {
		if (_requestTokenURL == null) {
			return StringPool.BLANK;
		}
		else {
			return _requestTokenURL;
		}
	}

	public void setRequestTokenURL(String requestTokenURL) {
		_requestTokenURL = requestTokenURL;
	}

	public String getAuthoriseURL() {
		if (_authoriseURL == null) {
			return StringPool.BLANK;
		}
		else {
			return _authoriseURL;
		}
	}

	public void setAuthoriseURL(String authoriseURL) {
		_authoriseURL = authoriseURL;
	}

	public String getAccessTokenURL() {
		if (_accessTokenURL == null) {
			return StringPool.BLANK;
		}
		else {
			return _accessTokenURL;
		}
	}

	public void setAccessTokenURL(String accessTokenURL) {
		_accessTokenURL = accessTokenURL;
	}

	public String getProtocolVersion() {
		if (_protocolVersion == null) {
			return StringPool.BLANK;
		}
		else {
			return _protocolVersion;
		}
	}

	public void setProtocolVersion(String protocolVersion) {
		_protocolVersion = protocolVersion;
	}

	public String getPreemptiveAuthURLPattern() {
		if (_preemptiveAuthURLPattern == null) {
			return StringPool.BLANK;
		}
		else {
			return _preemptiveAuthURLPattern;
		}
	}

	public void setPreemptiveAuthURLPattern(String preemptiveAuthURLPattern) {
		_preemptiveAuthURLPattern = preemptiveAuthURLPattern;
	}

	public boolean getUseHTTPS() {
		return _useHTTPS;
	}

	public boolean isUseHTTPS() {
		return _useHTTPS;
	}

	public void setUseHTTPS(boolean useHTTPS) {
		_useHTTPS = useHTTPS;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			OAuthProvider.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public OAuthProvider toEscapedModel() {
		if (_escapedModelProxy == null) {
			_escapedModelProxy = (OAuthProvider)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelProxyInterfaces,
					new AutoEscapeBeanHandler(this));
		}

		return _escapedModelProxy;
	}

	@Override
	public Object clone() {
		OAuthProviderImpl oAuthProviderImpl = new OAuthProviderImpl();

		oAuthProviderImpl.setProviderId(getProviderId());
		oAuthProviderImpl.setUserId(getUserId());
		oAuthProviderImpl.setUserName(getUserName());
		oAuthProviderImpl.setCreateDate(getCreateDate());
		oAuthProviderImpl.setModifiedDate(getModifiedDate());
		oAuthProviderImpl.setConsumerKey(getConsumerKey());
		oAuthProviderImpl.setConsumerSecret(getConsumerSecret());
		oAuthProviderImpl.setRealm(getRealm());
		oAuthProviderImpl.setRequestTokenURL(getRequestTokenURL());
		oAuthProviderImpl.setAuthoriseURL(getAuthoriseURL());
		oAuthProviderImpl.setAccessTokenURL(getAccessTokenURL());
		oAuthProviderImpl.setProtocolVersion(getProtocolVersion());
		oAuthProviderImpl.setPreemptiveAuthURLPattern(getPreemptiveAuthURLPattern());
		oAuthProviderImpl.setUseHTTPS(getUseHTTPS());

		oAuthProviderImpl.resetOriginalValues();

		return oAuthProviderImpl;
	}

	public int compareTo(OAuthProvider oAuthProvider) {
		int value = 0;

		value = getRealm().compareTo(oAuthProvider.getRealm());

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object obj) {
		if (obj == null) {
			return false;
		}

		OAuthProvider oAuthProvider = null;

		try {
			oAuthProvider = (OAuthProvider)obj;
		}
		catch (ClassCastException cce) {
			return false;
		}

		long primaryKey = oAuthProvider.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
		OAuthProviderModelImpl oAuthProviderModelImpl = this;

		oAuthProviderModelImpl._originalRealm = oAuthProviderModelImpl._realm;

		oAuthProviderModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<OAuthProvider> toCacheModel() {
		OAuthProviderCacheModel oAuthProviderCacheModel = new OAuthProviderCacheModel();

		oAuthProviderCacheModel.providerId = getProviderId();

		oAuthProviderCacheModel.userId = getUserId();

		oAuthProviderCacheModel.userName = getUserName();

		String userName = oAuthProviderCacheModel.userName;

		if ((userName != null) && (userName.length() == 0)) {
			oAuthProviderCacheModel.userName = null;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			oAuthProviderCacheModel.createDate = createDate.getTime();
		}
		else {
			oAuthProviderCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			oAuthProviderCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			oAuthProviderCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		oAuthProviderCacheModel.consumerKey = getConsumerKey();

		String consumerKey = oAuthProviderCacheModel.consumerKey;

		if ((consumerKey != null) && (consumerKey.length() == 0)) {
			oAuthProviderCacheModel.consumerKey = null;
		}

		oAuthProviderCacheModel.consumerSecret = getConsumerSecret();

		String consumerSecret = oAuthProviderCacheModel.consumerSecret;

		if ((consumerSecret != null) && (consumerSecret.length() == 0)) {
			oAuthProviderCacheModel.consumerSecret = null;
		}

		oAuthProviderCacheModel.realm = getRealm();

		String realm = oAuthProviderCacheModel.realm;

		if ((realm != null) && (realm.length() == 0)) {
			oAuthProviderCacheModel.realm = null;
		}

		oAuthProviderCacheModel.requestTokenURL = getRequestTokenURL();

		String requestTokenURL = oAuthProviderCacheModel.requestTokenURL;

		if ((requestTokenURL != null) && (requestTokenURL.length() == 0)) {
			oAuthProviderCacheModel.requestTokenURL = null;
		}

		oAuthProviderCacheModel.authoriseURL = getAuthoriseURL();

		String authoriseURL = oAuthProviderCacheModel.authoriseURL;

		if ((authoriseURL != null) && (authoriseURL.length() == 0)) {
			oAuthProviderCacheModel.authoriseURL = null;
		}

		oAuthProviderCacheModel.accessTokenURL = getAccessTokenURL();

		String accessTokenURL = oAuthProviderCacheModel.accessTokenURL;

		if ((accessTokenURL != null) && (accessTokenURL.length() == 0)) {
			oAuthProviderCacheModel.accessTokenURL = null;
		}

		oAuthProviderCacheModel.protocolVersion = getProtocolVersion();

		String protocolVersion = oAuthProviderCacheModel.protocolVersion;

		if ((protocolVersion != null) && (protocolVersion.length() == 0)) {
			oAuthProviderCacheModel.protocolVersion = null;
		}

		oAuthProviderCacheModel.preemptiveAuthURLPattern = getPreemptiveAuthURLPattern();

		String preemptiveAuthURLPattern = oAuthProviderCacheModel.preemptiveAuthURLPattern;

		if ((preemptiveAuthURLPattern != null) &&
				(preemptiveAuthURLPattern.length() == 0)) {
			oAuthProviderCacheModel.preemptiveAuthURLPattern = null;
		}

		oAuthProviderCacheModel.useHTTPS = getUseHTTPS();

		return oAuthProviderCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(29);

		sb.append("{providerId=");
		sb.append(getProviderId());
		sb.append(", userId=");
		sb.append(getUserId());
		sb.append(", userName=");
		sb.append(getUserName());
		sb.append(", createDate=");
		sb.append(getCreateDate());
		sb.append(", modifiedDate=");
		sb.append(getModifiedDate());
		sb.append(", consumerKey=");
		sb.append(getConsumerKey());
		sb.append(", consumerSecret=");
		sb.append(getConsumerSecret());
		sb.append(", realm=");
		sb.append(getRealm());
		sb.append(", requestTokenURL=");
		sb.append(getRequestTokenURL());
		sb.append(", authoriseURL=");
		sb.append(getAuthoriseURL());
		sb.append(", accessTokenURL=");
		sb.append(getAccessTokenURL());
		sb.append(", protocolVersion=");
		sb.append(getProtocolVersion());
		sb.append(", preemptiveAuthURLPattern=");
		sb.append(getPreemptiveAuthURLPattern());
		sb.append(", useHTTPS=");
		sb.append(getUseHTTPS());
		sb.append("}");

		return sb.toString();
	}

	public String toXmlString() {
		StringBundler sb = new StringBundler(46);

		sb.append("<model><model-name>");
		sb.append("com.wordpress.metaphorm.authProxy.sb.model.OAuthProvider");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>providerId</column-name><column-value><![CDATA[");
		sb.append(getProviderId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userId</column-name><column-value><![CDATA[");
		sb.append(getUserId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userName</column-name><column-value><![CDATA[");
		sb.append(getUserName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createDate</column-name><column-value><![CDATA[");
		sb.append(getCreateDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>modifiedDate</column-name><column-value><![CDATA[");
		sb.append(getModifiedDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>consumerKey</column-name><column-value><![CDATA[");
		sb.append(getConsumerKey());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>consumerSecret</column-name><column-value><![CDATA[");
		sb.append(getConsumerSecret());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>realm</column-name><column-value><![CDATA[");
		sb.append(getRealm());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>requestTokenURL</column-name><column-value><![CDATA[");
		sb.append(getRequestTokenURL());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>authoriseURL</column-name><column-value><![CDATA[");
		sb.append(getAuthoriseURL());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>accessTokenURL</column-name><column-value><![CDATA[");
		sb.append(getAccessTokenURL());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>protocolVersion</column-name><column-value><![CDATA[");
		sb.append(getProtocolVersion());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>preemptiveAuthURLPattern</column-name><column-value><![CDATA[");
		sb.append(getPreemptiveAuthURLPattern());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>useHTTPS</column-name><column-value><![CDATA[");
		sb.append(getUseHTTPS());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = OAuthProvider.class.getClassLoader();
	private static Class<?>[] _escapedModelProxyInterfaces = new Class[] {
			OAuthProvider.class
		};
	private long _providerId;
	private long _userId;
	private String _userUuid;
	private String _userName;
	private Date _createDate;
	private Date _modifiedDate;
	private String _consumerKey;
	private String _consumerSecret;
	private String _realm;
	private String _originalRealm;
	private String _requestTokenURL;
	private String _authoriseURL;
	private String _accessTokenURL;
	private String _protocolVersion;
	private String _preemptiveAuthURLPattern;
	private boolean _useHTTPS;
	private long _columnBitmask;
	private OAuthProvider _escapedModelProxy;
}