/**
 * Copyright (c) 2000-2012 Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.wordpress.metaphorm.authProxy.sb.model.impl;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;
import com.liferay.portal.util.PortalUtil;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import com.wordpress.metaphorm.authProxy.sb.model.OAuthConnection;
import com.wordpress.metaphorm.authProxy.sb.model.OAuthConnectionModel;

import java.io.Serializable;

import java.sql.Types;

import java.util.Date;
import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the OAuthConnection service. Represents a row in the &quot;OAuthProxy_OAuthConnection&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.wordpress.metaphorm.authProxy.sb.model.OAuthConnectionModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link OAuthConnectionImpl}.
 * </p>
 *
 * @author stiansigvartsen
 * @see OAuthConnectionImpl
 * @see com.wordpress.metaphorm.authProxy.sb.model.OAuthConnection
 * @see com.wordpress.metaphorm.authProxy.sb.model.OAuthConnectionModel
 * @generated
 */
public class OAuthConnectionModelImpl extends BaseModelImpl<OAuthConnection>
	implements OAuthConnectionModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a o auth connection model instance should use the {@link com.wordpress.metaphorm.authProxy.sb.model.OAuthConnection} interface instead.
	 */
	public static final String TABLE_NAME = "OAuthProxy_OAuthConnection";
	public static final Object[][] TABLE_COLUMNS = {
			{ "connectionId", Types.BIGINT },
			{ "companyId", Types.BIGINT },
			{ "groupId", Types.BIGINT },
			{ "userId", Types.BIGINT },
			{ "userName", Types.VARCHAR },
			{ "createDate", Types.TIMESTAMP },
			{ "modifiedDate", Types.TIMESTAMP },
			{ "token", Types.VARCHAR },
			{ "tokenSecret", Types.VARCHAR },
			{ "realm", Types.VARCHAR },
			{ "phase", Types.INTEGER }
		};
	public static final String TABLE_SQL_CREATE = "create table OAuthProxy_OAuthConnection (connectionId LONG not null primary key,companyId LONG,groupId LONG,userId LONG,userName VARCHAR(75) null,createDate DATE null,modifiedDate DATE null,token VARCHAR(75) null,tokenSecret VARCHAR(75) null,realm VARCHAR(75) null,phase INTEGER)";
	public static final String TABLE_SQL_DROP = "drop table OAuthProxy_OAuthConnection";
	public static final String ORDER_BY_JPQL = " ORDER BY oAuthConnection.realm ASC";
	public static final String ORDER_BY_SQL = " ORDER BY OAuthProxy_OAuthConnection.realm ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.com.wordpress.metaphorm.authProxy.sb.model.OAuthConnection"),
			false);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.com.wordpress.metaphorm.authProxy.sb.model.OAuthConnection"),
			false);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.column.bitmask.enabled.com.wordpress.metaphorm.authProxy.sb.model.OAuthConnection"),
			true);
	public static long COMPANYID_COLUMN_BITMASK = 1L;
	public static long GROUPID_COLUMN_BITMASK = 2L;
	public static long REALM_COLUMN_BITMASK = 4L;
	public static long USERID_COLUMN_BITMASK = 8L;
	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.com.wordpress.metaphorm.authProxy.sb.model.OAuthConnection"));

	public OAuthConnectionModelImpl() {
	}

	public long getPrimaryKey() {
		return _connectionId;
	}

	public void setPrimaryKey(long primaryKey) {
		setConnectionId(primaryKey);
	}

	public Serializable getPrimaryKeyObj() {
		return new Long(_connectionId);
	}

	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	public Class<?> getModelClass() {
		return OAuthConnection.class;
	}

	public String getModelClassName() {
		return OAuthConnection.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("connectionId", getConnectionId());
		attributes.put("companyId", getCompanyId());
		attributes.put("groupId", getGroupId());
		attributes.put("userId", getUserId());
		attributes.put("userName", getUserName());
		attributes.put("createDate", getCreateDate());
		attributes.put("modifiedDate", getModifiedDate());
		attributes.put("token", getToken());
		attributes.put("tokenSecret", getTokenSecret());
		attributes.put("realm", getRealm());
		attributes.put("phase", getPhase());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long connectionId = (Long)attributes.get("connectionId");

		if (connectionId != null) {
			setConnectionId(connectionId);
		}

		Long companyId = (Long)attributes.get("companyId");

		if (companyId != null) {
			setCompanyId(companyId);
		}

		Long groupId = (Long)attributes.get("groupId");

		if (groupId != null) {
			setGroupId(groupId);
		}

		Long userId = (Long)attributes.get("userId");

		if (userId != null) {
			setUserId(userId);
		}

		String userName = (String)attributes.get("userName");

		if (userName != null) {
			setUserName(userName);
		}

		Date createDate = (Date)attributes.get("createDate");

		if (createDate != null) {
			setCreateDate(createDate);
		}

		Date modifiedDate = (Date)attributes.get("modifiedDate");

		if (modifiedDate != null) {
			setModifiedDate(modifiedDate);
		}

		String token = (String)attributes.get("token");

		if (token != null) {
			setToken(token);
		}

		String tokenSecret = (String)attributes.get("tokenSecret");

		if (tokenSecret != null) {
			setTokenSecret(tokenSecret);
		}

		String realm = (String)attributes.get("realm");

		if (realm != null) {
			setRealm(realm);
		}

		Integer phase = (Integer)attributes.get("phase");

		if (phase != null) {
			setPhase(phase);
		}
	}

	public long getConnectionId() {
		return _connectionId;
	}

	public void setConnectionId(long connectionId) {
		_connectionId = connectionId;
	}

	public long getCompanyId() {
		return _companyId;
	}

	public void setCompanyId(long companyId) {
		_columnBitmask |= COMPANYID_COLUMN_BITMASK;

		if (!_setOriginalCompanyId) {
			_setOriginalCompanyId = true;

			_originalCompanyId = _companyId;
		}

		_companyId = companyId;
	}

	public long getOriginalCompanyId() {
		return _originalCompanyId;
	}

	public long getGroupId() {
		return _groupId;
	}

	public void setGroupId(long groupId) {
		_columnBitmask |= GROUPID_COLUMN_BITMASK;

		if (!_setOriginalGroupId) {
			_setOriginalGroupId = true;

			_originalGroupId = _groupId;
		}

		_groupId = groupId;
	}

	public long getOriginalGroupId() {
		return _originalGroupId;
	}

	public long getUserId() {
		return _userId;
	}

	public void setUserId(long userId) {
		_columnBitmask |= USERID_COLUMN_BITMASK;

		if (!_setOriginalUserId) {
			_setOriginalUserId = true;

			_originalUserId = _userId;
		}

		_userId = userId;
	}

	public String getUserUuid() throws SystemException {
		return PortalUtil.getUserValue(getUserId(), "uuid", _userUuid);
	}

	public void setUserUuid(String userUuid) {
		_userUuid = userUuid;
	}

	public long getOriginalUserId() {
		return _originalUserId;
	}

	public String getUserName() {
		if (_userName == null) {
			return StringPool.BLANK;
		}
		else {
			return _userName;
		}
	}

	public void setUserName(String userName) {
		_userName = userName;
	}

	public Date getCreateDate() {
		return _createDate;
	}

	public void setCreateDate(Date createDate) {
		_createDate = createDate;
	}

	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public void setModifiedDate(Date modifiedDate) {
		_modifiedDate = modifiedDate;
	}

	public String getToken() {
		if (_token == null) {
			return StringPool.BLANK;
		}
		else {
			return _token;
		}
	}

	public void setToken(String token) {
		_token = token;
	}

	public String getTokenSecret() {
		if (_tokenSecret == null) {
			return StringPool.BLANK;
		}
		else {
			return _tokenSecret;
		}
	}

	public void setTokenSecret(String tokenSecret) {
		_tokenSecret = tokenSecret;
	}

	public String getRealm() {
		if (_realm == null) {
			return StringPool.BLANK;
		}
		else {
			return _realm;
		}
	}

	public void setRealm(String realm) {
		_columnBitmask = -1L;

		if (_originalRealm == null) {
			_originalRealm = _realm;
		}

		_realm = realm;
	}

	public String getOriginalRealm() {
		return GetterUtil.getString(_originalRealm);
	}

	public int getPhase() {
		return _phase;
	}

	public void setPhase(int phase) {
		_phase = phase;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(getCompanyId(),
			OAuthConnection.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public OAuthConnection toEscapedModel() {
		if (_escapedModelProxy == null) {
			_escapedModelProxy = (OAuthConnection)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelProxyInterfaces,
					new AutoEscapeBeanHandler(this));
		}

		return _escapedModelProxy;
	}

	@Override
	public Object clone() {
		OAuthConnectionImpl oAuthConnectionImpl = new OAuthConnectionImpl();

		oAuthConnectionImpl.setConnectionId(getConnectionId());
		oAuthConnectionImpl.setCompanyId(getCompanyId());
		oAuthConnectionImpl.setGroupId(getGroupId());
		oAuthConnectionImpl.setUserId(getUserId());
		oAuthConnectionImpl.setUserName(getUserName());
		oAuthConnectionImpl.setCreateDate(getCreateDate());
		oAuthConnectionImpl.setModifiedDate(getModifiedDate());
		oAuthConnectionImpl.setToken(getToken());
		oAuthConnectionImpl.setTokenSecret(getTokenSecret());
		oAuthConnectionImpl.setRealm(getRealm());
		oAuthConnectionImpl.setPhase(getPhase());

		oAuthConnectionImpl.resetOriginalValues();

		return oAuthConnectionImpl;
	}

	public int compareTo(OAuthConnection oAuthConnection) {
		int value = 0;

		value = getRealm().compareTo(oAuthConnection.getRealm());

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object obj) {
		if (obj == null) {
			return false;
		}

		OAuthConnection oAuthConnection = null;

		try {
			oAuthConnection = (OAuthConnection)obj;
		}
		catch (ClassCastException cce) {
			return false;
		}

		long primaryKey = oAuthConnection.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
		OAuthConnectionModelImpl oAuthConnectionModelImpl = this;

		oAuthConnectionModelImpl._originalCompanyId = oAuthConnectionModelImpl._companyId;

		oAuthConnectionModelImpl._setOriginalCompanyId = false;

		oAuthConnectionModelImpl._originalGroupId = oAuthConnectionModelImpl._groupId;

		oAuthConnectionModelImpl._setOriginalGroupId = false;

		oAuthConnectionModelImpl._originalUserId = oAuthConnectionModelImpl._userId;

		oAuthConnectionModelImpl._setOriginalUserId = false;

		oAuthConnectionModelImpl._originalRealm = oAuthConnectionModelImpl._realm;

		oAuthConnectionModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<OAuthConnection> toCacheModel() {
		OAuthConnectionCacheModel oAuthConnectionCacheModel = new OAuthConnectionCacheModel();

		oAuthConnectionCacheModel.connectionId = getConnectionId();

		oAuthConnectionCacheModel.companyId = getCompanyId();

		oAuthConnectionCacheModel.groupId = getGroupId();

		oAuthConnectionCacheModel.userId = getUserId();

		oAuthConnectionCacheModel.userName = getUserName();

		String userName = oAuthConnectionCacheModel.userName;

		if ((userName != null) && (userName.length() == 0)) {
			oAuthConnectionCacheModel.userName = null;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			oAuthConnectionCacheModel.createDate = createDate.getTime();
		}
		else {
			oAuthConnectionCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			oAuthConnectionCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			oAuthConnectionCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		oAuthConnectionCacheModel.token = getToken();

		String token = oAuthConnectionCacheModel.token;

		if ((token != null) && (token.length() == 0)) {
			oAuthConnectionCacheModel.token = null;
		}

		oAuthConnectionCacheModel.tokenSecret = getTokenSecret();

		String tokenSecret = oAuthConnectionCacheModel.tokenSecret;

		if ((tokenSecret != null) && (tokenSecret.length() == 0)) {
			oAuthConnectionCacheModel.tokenSecret = null;
		}

		oAuthConnectionCacheModel.realm = getRealm();

		String realm = oAuthConnectionCacheModel.realm;

		if ((realm != null) && (realm.length() == 0)) {
			oAuthConnectionCacheModel.realm = null;
		}

		oAuthConnectionCacheModel.phase = getPhase();

		return oAuthConnectionCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(23);

		sb.append("{connectionId=");
		sb.append(getConnectionId());
		sb.append(", companyId=");
		sb.append(getCompanyId());
		sb.append(", groupId=");
		sb.append(getGroupId());
		sb.append(", userId=");
		sb.append(getUserId());
		sb.append(", userName=");
		sb.append(getUserName());
		sb.append(", createDate=");
		sb.append(getCreateDate());
		sb.append(", modifiedDate=");
		sb.append(getModifiedDate());
		sb.append(", token=");
		sb.append(getToken());
		sb.append(", tokenSecret=");
		sb.append(getTokenSecret());
		sb.append(", realm=");
		sb.append(getRealm());
		sb.append(", phase=");
		sb.append(getPhase());
		sb.append("}");

		return sb.toString();
	}

	public String toXmlString() {
		StringBundler sb = new StringBundler(37);

		sb.append("<model><model-name>");
		sb.append("com.wordpress.metaphorm.authProxy.sb.model.OAuthConnection");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>connectionId</column-name><column-value><![CDATA[");
		sb.append(getConnectionId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>companyId</column-name><column-value><![CDATA[");
		sb.append(getCompanyId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>groupId</column-name><column-value><![CDATA[");
		sb.append(getGroupId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userId</column-name><column-value><![CDATA[");
		sb.append(getUserId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userName</column-name><column-value><![CDATA[");
		sb.append(getUserName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createDate</column-name><column-value><![CDATA[");
		sb.append(getCreateDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>modifiedDate</column-name><column-value><![CDATA[");
		sb.append(getModifiedDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>token</column-name><column-value><![CDATA[");
		sb.append(getToken());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>tokenSecret</column-name><column-value><![CDATA[");
		sb.append(getTokenSecret());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>realm</column-name><column-value><![CDATA[");
		sb.append(getRealm());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>phase</column-name><column-value><![CDATA[");
		sb.append(getPhase());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = OAuthConnection.class.getClassLoader();
	private static Class<?>[] _escapedModelProxyInterfaces = new Class[] {
			OAuthConnection.class
		};
	private long _connectionId;
	private long _companyId;
	private long _originalCompanyId;
	private boolean _setOriginalCompanyId;
	private long _groupId;
	private long _originalGroupId;
	private boolean _setOriginalGroupId;
	private long _userId;
	private String _userUuid;
	private long _originalUserId;
	private boolean _setOriginalUserId;
	private String _userName;
	private Date _createDate;
	private Date _modifiedDate;
	private String _token;
	private String _tokenSecret;
	private String _realm;
	private String _originalRealm;
	private int _phase;
	private long _columnBitmask;
	private OAuthConnection _escapedModelProxy;
}