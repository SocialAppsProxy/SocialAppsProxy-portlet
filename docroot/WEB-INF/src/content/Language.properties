oauth-realm=OAuth Realm
oauth-realm-url-pattern=Resources URL Pattern
oauth-consumer-key=Consumer Key
oauth-consumer-secret=Consumer Secret
oauth-version=Version
add-provider=Add a New OAuth Service Provider
oauth-request-token-url=Request token URL
oauth-authorise-token-url=Authorise token URL
oauth-access-token-url=Access token URL
use-https=Use HTTPS
oauth-phase=OAuth Phase
oauth-token=Token
oauth-token-secret=Token Secret
oauth-token-create-date=Creation Date
no-oauth-tokens=No connected apps or services were found
no-oauth-providers=No OAuth service providers were found
oauth-service-provider-intro=OAuth Service Providers provide services that enable end-users to delegate access permission to their information and functionality to 3rd party apps. It is a token based protocol, so no user credentials are exchanged and access can be revoked from either end at any time.
oauth-service-provider-help=Social Apps Proxy is a plug-in which takes the pain out of integrating with such services by acting as a HTTP proxy server to the 3rd party apps running within Liferay Portal. The plug-in makes available a secure token, which the 3rd party app can pass back to the HTTP proxy server to instruct it to automatically sign HTTP requests on behalf of the end-user when consuming OAuth services. End-users can manage the OAuth tokens they have granted from the "My Account" section.
oauth-service-provider-getting-started-intro=In some cases it is possible to auto-discover OAuth realms. To do this, simply configure your web browser to use Liferay Portal as its HTTP proxy server (use the port it normally serves on), then using your web browser, follow these steps.
oauth-service-provider-getting-started-step-1=Request a HTTP resource URL you suspect is protected by OAuth. If it is, then it is likely to describe its OAuth realm to the proxy server, causing the proxy server to automatically add it to the list above. Please note that only the OAuth realm is discoverable, and more details needs to be entered before integration is achieved
oauth-service-provider-getting-started-step-2=Go to the service provider's website and register a new "application". You will then be issued with your consumer key and secret.
oauth-service-provider-getting-started-step-3=Edit the OAuth provider's configuration above and enter your consumer key and secret.
oauth-service-provider-getting-started-step-4=By consuling the OAuth service provider's documentation, also enter the token request, authorisation and access token exchange URLs. Press "save".
oauth-service-provider-getting-started-step-5=Repeat your request to your chosen URL in step 1 again. This time you should be redirected to the authorisation URL you configured. Upon granting the access you will be redirected back and OAuth protected resource should be served!
oauth-service-provider-getting-started-step-6=You are now ready to consume OAuth protected resources from this service provider in your Liferay Portal portlets!

integration-info-intro=When the Social Apps Proxy is configured as your portlet's HTTP proxy server, end-users who use your portlet and who are logged into Liferay Portal will have their OAuth tokens persisted indefinitely, and these will be used to sign HTTP requests sent by your portlet.

integration-info-configure-http-client=Choose your desired HTTP client library. A popular choice is Apache HTTP Components.
integration-info-configure-http-make-request=Write the necessary code to configure client HTTP requests to use the Liferay Portal as a HTTP proxy server.
integration-info-http-headers=Write the necessary code to send two additional HTTP headers (described below) with your HTTP requests for OAuth protected resources.
integration-info-http-header-userToken=Value obtained from the "userToken" render/action request attribute made available to your portlet. Simply pass the value on.
integration-info-http-header-oauth_callback=This needs to be set to the absolute URL you would like end-users to be redirected back to after granting authorisation on the OAuth service provider website. Most likely you will simply want to set this to your portlet's render URL.
integration-info-redirect=If OAuth authorisation is required from the end-user, the proxy server will respond to the HTTP client with a snippet of XML describing the URL to redirect the browser to.
integration-info-oauth-resource=Otherwise the OAuth protected resource should be served to the HTTP client, and your portlet!

contact-info=If you enjoy using this plug-in or require some assistance, just drop me a tweet! @StianSigvartsen . I will be sharing examples of integrations on <a href="https://github.com/stiansigvartsen">github.com</a>.